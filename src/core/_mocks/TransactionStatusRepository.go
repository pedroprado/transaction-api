// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	_interfaces "pedroprado.transaction.api/src/core/_interfaces"
	entity "pedroprado.transaction.api/src/core/domain/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// TransactionStatusRepository is an autogenerated mock type for the TransactionStatusRepository type
type TransactionStatusRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: transactionStatus
func (_m *TransactionStatusRepository) Create(transactionStatus entity.TransactionStatus) (*entity.TransactionStatus, error) {
	ret := _m.Called(transactionStatus)

	var r0 *entity.TransactionStatus
	if rf, ok := ret.Get(0).(func(entity.TransactionStatus) *entity.TransactionStatus); ok {
		r0 = rf(transactionStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TransactionStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.TransactionStatus) error); ok {
		r1 = rf(transactionStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTransactionID provides a mock function with given fields: transactionID
func (_m *TransactionStatusRepository) FindByTransactionID(transactionID string) (*entity.TransactionStatus, error) {
	ret := _m.Called(transactionID)

	var r0 *entity.TransactionStatus
	if rf, ok := ret.Get(0).(func(string) *entity.TransactionStatus); ok {
		r0 = rf(transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TransactionStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: transactionStatus
func (_m *TransactionStatusRepository) Update(transactionStatus entity.TransactionStatus) (*entity.TransactionStatus, error) {
	ret := _m.Called(transactionStatus)

	var r0 *entity.TransactionStatus
	if rf, ok := ret.Get(0).(func(entity.TransactionStatus) *entity.TransactionStatus); ok {
		r0 = rf(transactionStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TransactionStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.TransactionStatus) error); ok {
		r1 = rf(transactionStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTransaction provides a mock function with given fields: tx
func (_m *TransactionStatusRepository) WithTransaction(tx *gorm.DB) _interfaces.TransactionStatusRepository {
	ret := _m.Called(tx)

	var r0 _interfaces.TransactionStatusRepository
	if rf, ok := ret.Get(0).(func(*gorm.DB) _interfaces.TransactionStatusRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(_interfaces.TransactionStatusRepository)
		}
	}

	return r0
}

type mockConstructorTestingTNewTransactionStatusRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionStatusRepository creates a new instance of TransactionStatusRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionStatusRepository(t mockConstructorTestingTNewTransactionStatusRepository) *TransactionStatusRepository {
	mock := &TransactionStatusRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
