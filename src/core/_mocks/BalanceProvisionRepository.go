// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	_interfaces "pedroprado.transaction.api/src/core/_interfaces"
	entity "pedroprado.transaction.api/src/core/domain/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// BalanceProvisionRepository is an autogenerated mock type for the BalanceProvisionRepository type
type BalanceProvisionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: balanceProvision
func (_m *BalanceProvisionRepository) Create(balanceProvision entity.BalanceProvision) (*entity.BalanceProvision, error) {
	ret := _m.Called(balanceProvision)

	var r0 *entity.BalanceProvision
	if rf, ok := ret.Get(0).(func(entity.BalanceProvision) *entity.BalanceProvision); ok {
		r0 = rf(balanceProvision)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.BalanceProvision)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.BalanceProvision) error); ok {
		r1 = rf(balanceProvision)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTransactionID provides a mock function with given fields: transactionID
func (_m *BalanceProvisionRepository) FindByTransactionID(transactionID string) (entity.BalanceProvisions, error) {
	ret := _m.Called(transactionID)

	var r0 entity.BalanceProvisions
	if rf, ok := ret.Get(0).(func(string) entity.BalanceProvisions); ok {
		r0 = rf(transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.BalanceProvisions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: balanceProvisionID
func (_m *BalanceProvisionRepository) Get(balanceProvisionID string) (*entity.BalanceProvision, error) {
	ret := _m.Called(balanceProvisionID)

	var r0 *entity.BalanceProvision
	if rf, ok := ret.Get(0).(func(string) *entity.BalanceProvision); ok {
		r0 = rf(balanceProvisionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.BalanceProvision)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(balanceProvisionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: balanceProvision
func (_m *BalanceProvisionRepository) Update(balanceProvision entity.BalanceProvision) (*entity.BalanceProvision, error) {
	ret := _m.Called(balanceProvision)

	var r0 *entity.BalanceProvision
	if rf, ok := ret.Get(0).(func(entity.BalanceProvision) *entity.BalanceProvision); ok {
		r0 = rf(balanceProvision)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.BalanceProvision)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.BalanceProvision) error); ok {
		r1 = rf(balanceProvision)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTransaction provides a mock function with given fields: tx
func (_m *BalanceProvisionRepository) WithTransaction(tx *gorm.DB) _interfaces.BalanceProvisionRepository {
	ret := _m.Called(tx)

	var r0 _interfaces.BalanceProvisionRepository
	if rf, ok := ret.Get(0).(func(*gorm.DB) _interfaces.BalanceProvisionRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(_interfaces.BalanceProvisionRepository)
		}
	}

	return r0
}

type mockConstructorTestingTNewBalanceProvisionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBalanceProvisionRepository creates a new instance of BalanceProvisionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBalanceProvisionRepository(t mockConstructorTestingTNewBalanceProvisionRepository) *BalanceProvisionRepository {
	mock := &BalanceProvisionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
