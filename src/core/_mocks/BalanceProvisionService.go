// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "pedroprado.transaction.api/src/core/domain/entity"
)

// BalanceProvisionService is an autogenerated mock type for the BalanceProvisionService type
type BalanceProvisionService struct {
	mock.Mock
}

// Create provides a mock function with given fields: balanceProvision
func (_m *BalanceProvisionService) Create(balanceProvision entity.BalanceProvision) (*entity.BalanceProvision, error) {
	ret := _m.Called(balanceProvision)

	var r0 *entity.BalanceProvision
	if rf, ok := ret.Get(0).(func(entity.BalanceProvision) *entity.BalanceProvision); ok {
		r0 = rf(balanceProvision)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.BalanceProvision)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.BalanceProvision) error); ok {
		r1 = rf(balanceProvision)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: balanceProvisionID
func (_m *BalanceProvisionService) Get(balanceProvisionID string) (*entity.BalanceProvision, error) {
	ret := _m.Called(balanceProvisionID)

	var r0 *entity.BalanceProvision
	if rf, ok := ret.Get(0).(func(string) *entity.BalanceProvision); ok {
		r0 = rf(balanceProvisionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.BalanceProvision)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(balanceProvisionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: balanceProvision
func (_m *BalanceProvisionService) Update(balanceProvision entity.BalanceProvision) (*entity.BalanceProvision, error) {
	ret := _m.Called(balanceProvision)

	var r0 *entity.BalanceProvision
	if rf, ok := ret.Get(0).(func(entity.BalanceProvision) *entity.BalanceProvision); ok {
		r0 = rf(balanceProvision)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.BalanceProvision)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.BalanceProvision) error); ok {
		r1 = rf(balanceProvision)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBalanceProvisionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBalanceProvisionService creates a new instance of BalanceProvisionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBalanceProvisionService(t mockConstructorTestingTNewBalanceProvisionService) *BalanceProvisionService {
	mock := &BalanceProvisionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
